<!--===========================================================================
  This is the build file for the Pentaho Marketplace project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See build-res/subfloor-pkg.xml for more details
============================================================================-->
<project name="Pentaho Marketplace" basedir="." default="resolve-and-dist" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the Pentaho Marketplace Plugin
    and works with the common_build.xml file.
  </description>

  <property 
    name="sequential.build.id"
    value="1"
    description="Property that controls the buildId on version.xml. Should be set by CI jobs" 
  />

  <!-- property overrides -->
  <property name="js.module.dir" value="resources/web/app/js"/>
  <property name="js.module.script.dir" value="package-res/${js.module.dir}"/>
  <property name="js.module.lib.dir" value="package-res/resources/web/app/lib"/>
  <!-- end property overrides -->

  <!-- Import the subfloor-js.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-js.xml"/>









 <!-- location to expand the zipped contents of js dependencies (to be available for testing) -->
  <property name="js.expanded.lib.dir" value="package-res/resources/web/app/lib/provided"/>

  <property name="js.requires.node" value="true"/>
  <property name="js.requires.karma" value="true"/>
  <property name="js.karma.config" value="config/karma.ci.conf.js"/>
  <property environment="env"/>

  <target name="setup-js-dirs" description="Setups dirs needed for r.js build">
    <delete dir="${js.module.script.agg.dir}/app" />
    <delete dir="${js.module.script.agg.dir}/lib" />
    <delete dir="${js.build.output.dir}" />
    <copy todir="${js.module.script.agg.dir}/app" overwrite="true">
      <fileset dir="js-lib/expanded/">
        <include name="**/*"/>
      </fileset>
    </copy>
    <echo>
      ${js.module.lib.dir}
    </echo>
    <copy todir="${js.module.script.agg.dir}/lib" overwrite="true">
      <fileset dir="${js.module.lib.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <target name="dist-js" depends="release-build-map.js, subfloor-js.dist-js"/>
  <target name="dist-dev-js" depends="quick-build.js, subfloor-js.dist-js"/>

  <target name="quick-build.js" description="Builds debug JS modules for development" depends="setup-js-dirs, npm-install">
    <exec executable="node">
      <arg value="node_modules/requirejs/bin/r.js"/>
      <arg value="-o"/>
      <arg value="build-res/javascript.build.js"/>
      <arg value="optimize=none"/>
    </exec>
  </target>

  <target name="release-build-map.js" description="Builds debug JS modules for release" depends="setup-js-dirs, npm-install">
    <exec executable="node">
      <arg value="node_modules/requirejs/bin/r.js"/>
      <arg value="-o"/>
      <arg value="build-res/javascript.build.js"/>
      <arg value="optimize=uglify2"/>
      <arg value="generateSourceMaps=true"/>
      <arg value="preserveLicenseComments=false"/>
    </exec>
  </target>




  <!-- override copying of libs, no need for plugin -->
  <target name="assemble.copy-libs">
      <copy todir="${approot.stage.dir}/lib">
          <fileset file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
      </copy>
      <copy todir="${approot.stage.dir}/lib">
          <fileset file="${lib.dir}/flexjson-*.jar" />
      </copy>
  </target>



 <!-- Override assembly of the artifacts to be packaged so we can remove un-needed js files -->
  <target name="assemble" depends="assemble.init,assemble.copy-libs">

    <copy todir="${approot.stage.dir}" overwrite="true">
      <fileset dir="${package.resdir}">
        <!-- don't copy the js files that will be provided by the platform  -->
        <exclude name="**/resources/web/app/lib/provided/**" />
        <!-- don't copy anything in a test folder -->
        <exclude name="**/test/**" />
        <!-- remove all standalone references as well -->
        <exclude name="**/standalone*" />
      </fileset>
    </copy>

    <!-- bring in the 'compiled' js scripts -->
    <copy todir="${approot.stage.dir}/${js.module.dir}" overwrite="true">
      <fileset dir="${js.build.output.dir}">
        <!-- don't copy the js files that will be provided by the platform  -->
        <exclude name="**/resources/web/app/lib/provided/**" />
        <!-- don't copy anything in a test folder -->
        <exclude name="**/test/**" />
        <!-- remove all standalone references as well -->
        <exclude name="**/standalone*" />
        <exclude name="**/build.txt" />
      </fileset>
    </copy>

    <!-- Update the version.xml with the current version of this plugin -->
    <replace file="${approot.stage.dir}/version.xml" token="@TRUNK@" value="${project.revision}"/>
    <replace file="${approot.stage.dir}/version.xml" token="@BUILDID@" value="${sequential.build.id}"/>

    <chmod perm="a+x" dir="${stage.dir}" includes="**/*.sh" />
  </target>


  <target name="package" depends="assemble,package-zip-no-maps"/>
  <target name="package-dev" depends="assemble,package-zip"/>

  <target name="package-zip-no-maps">
    <zip destfile="${dist.dir}/${package.basename}.zip">
      <zipfileset dir="${stage.dir}" filemode="755">
        <include name="**/*.sh" />
        <include name="**/JavaApplicationStub" />
        <include name="**/*.command" />
      </zipfileset>
      <zipfileset dir="${stage.dir}">
        <exclude name="**/*.sh" />
        <exclude name="**/JavaApplicationStub" />
        <exclude name="**/*.command" />
        <exclude name="**/*.map" />
        <exclude name="**/*.src.js" />
      </zipfileset>
    </zip>
  </target>





  <target name="resolve-and-dist" depends="resolve-js, resolve, dist-js, dist"/>

  <target name="install" depends="resolve-and-dist" description="Installs the plugin in the specified directory (${plugin.local.install.solutions.dir})">
      <delete dir="${plugin.local.install.solutions.dir}/system/${ivy.artifact.id}"/>
      <unzip src="dist/${package.id}-${project.revision}.zip" dest="${plugin.local.install.solutions.dir}/system"/>
  </target>






  <!-- Probably legacy from 4.x
  <target name="install-plugin" depends="install"  description="Installs the plugin in the specified directory (${biserver.dir}) and signals the server to initialize it">

      <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}" dest="${stage.dir}/blah.html"/>
  </target>
  -->
  

</project>
